ScoreNStrengthAll()
AllDataFile(net)
AllDataFileNoFlag(net)
setwd("..")
})
source("D:/Github/Rpackages/Teams/R/coherence.R")
setwd(gsCausation)
sapply(netList, function(net) {
setwd(net)
LogFileGen()
GroupStrengthAll(net)
CoherenceSingleNode()
ScoreNStrengthAll()
AllDataFile(net)
AllDataFileNoFlag(net)
setwd("..")
})
source("D:/Github/Rpackages/Teams/R/coherence.R")
setwd(gsCausation)
sapply(netList, function(net) {
setwd(net)
LogFileGen()
GroupStrengthAll(net)
CoherenceSingleNode()
ScoreNStrengthAll()
AllDataFile(net)
AllDataFileNoFlag(net)
setwd("..")
})
source("D:/Github/Rpackages/Teams/R/coherence.R")
setwd(gsCausation)
sapply(netList, function(net) {
setwd(net)
LogFileGen()
GroupStrengthAll(net)
CoherenceSingleNode()
ScoreNStrengthAll()
AllDataFile(net)
AllDataFileNoFlag(net)
setwd("..")
})
getwd()
debug(coherence)
sapply(netList, function(net) {
setwd(net)
LogFileGen()
GroupStrengthAll(net)
CoherenceSingleNode()
ScoreNStrengthAll()
AllDataFile(net)
AllDataFileNoFlag(net)
setwd("..")
})
setwd(gsCausation)
sapply(netList, function(net) {
setwd(net)
LogFileGen()
GroupStrengthAll(net)
CoherenceSingleNode()
ScoreNStrengthAll()
AllDataFile(net)
AllDataFileNoFlag(net)
setwd("..")
})
topoFile
source("D:/Github/Rpackages/Teams/R/coherence.R")
setwd(gsCausation)
sapply(netList, function(net) {
setwd(net)
LogFileGen()
GroupStrengthAll(net)
CoherenceSingleNode()
ScoreNStrengthAll()
AllDataFile(net)
AllDataFileNoFlag(net)
setwd("..")
})
library(purrr)
setwd(gsCausation)
sapply(netList, function(net) {
setwd(net)
LogFileGen()
GroupStrengthAll(net)
CoherenceSingleNode()
ScoreNStrengthAll()
AllDataFile(net)
AllDataFileNoFlag(net)
setwd("..")
})
source("D:/Github/Rpackages/Teams/R/coherence.R")
setwd(gsCausation)
sapply(netList, function(net) {
setwd(net)
LogFileGen()
GroupStrengthAll(net)
CoherenceSingleNode()
ScoreNStrengthAll()
AllDataFile(net)
AllDataFileNoFlag(net)
setwd("..")
})
setwd(gsCausation)
sapply(netList, function(net) {
setwd(net)
LogFileGen()
GroupStrengthAll(net)
CoherenceSingleNode()
ScoreNStrengthAll()
AllDataFile(net)
AllDataFileNoFlag(net)
setwd("..")
})
source("D:/Github/Rpackages/Teams/R/stateLabeller.R")
source("D:/Github/Rpackages/Teams/R/stateLabeller.R")
source("D:/Github/Rpackages/Teams/R/coherence.R")
setwd(gsCausation)
sapply(netList, function(net) {
setwd(net)
LogFileGen()
GroupStrengthAll(net)
CoherenceSingleNode()
ScoreNStrengthAll()
AllDataFile(net)
AllDataFileNoFlag(net)
setwd("..")
})
source("D:/Github/Rpackages/Teams/R/coherence.R")
setwd(gsCausation)
sapply(netList, function(net) {
setwd(net)
LogFileGen()
GroupStrengthAll(net)
CoherenceSingleNode()
ScoreNStrengthAll()
AllDataFile(net)
AllDataFileNoFlag(net)
setwd("..")
})
source("D:/Github/Rpackages/Teams/R/coherence.R")
getwd()
logDf <- read.csv("LogFile.csv")
topoFiles <- list.files(".", ".topo")
df <- sapply(topoFiles, function(topoFile) {
GroupStrength(topoFile, plotOut = plotOut, getTeams = T, logDf = logDf)
}) %>% t %>%
data.frame %>%
set_names(c("G11", "G22", "G12", "G21", "Gs")) %>%
mutate(Network = topoFiles %>% str_remove(".topo$"))
plotOut <- F
df <- sapply(topoFiles, function(topoFile) {
GroupStrength(topoFile, plotOut = plotOut, getTeams = T, logDf = logDf)
}) %>% t %>%
data.frame %>%
set_names(c("G11", "G22", "G12", "G21", "Gs")) %>%
mutate(Network = topoFiles %>% str_remove(".topo$"))
View(logDf)
df <- sapply(topoFiles, function(topoFile) {
GroupStrength(topoFile, plotOut = plotOut, getTeams = T, logDf = logDf)
logDf <<- logDf
}) %>% t %>%
data.frame %>%
set_names(c("G11", "G22", "G12", "G21", "Gs")) %>%
mutate(Network = topoFiles %>% str_remove(".topo$"))
df <- sapply(topoFiles, function(topoFile) {
g <- GroupStrength(topoFile, plotOut = plotOut, getTeams = T, logDf = logDf)
logDf <<- logDf
g
}) %>% t %>%
data.frame %>%
set_names(c("G11", "G22", "G12", "G21", "Gs")) %>%
mutate(Network = topoFiles %>% str_remove(".topo$"))
View(logDf)
source("D:/Github/Rpackages/Teams/R/influenceAndGs.R")
df <- sapply(topoFiles, function(topoFile) {
g <- GroupStrength(topoFile, plotOut = plotOut, getTeams = T, logDf = logDf)
logDf
logDf <<- logDf
g
}) %>% t %>%
data.frame %>%
set_names(c("G11", "G22", "G12", "G21", "Gs")) %>%
mutate(Network = topoFiles %>% str_remove(".topo$"))
View(logDf)
debug(GroupStrength)
source("D:/Github/Rpackages/Teams/R/influenceAndGs.R")
debug(GroupStrength)
df <- sapply(topoFiles, function(topoFile) {
g <- GroupStrength(topoFile, plotOut = plotOut, getTeams = T, logDf = logDf)
logDf
logDf <<- logDf
g
}) %>% t %>%
data.frame %>%
set_names(c("G11", "G22", "G12", "G21", "Gs")) %>%
mutate(Network = topoFiles %>% str_remove(".topo$"))
View(logDf)
View(logDf)
View(logDf)
View(logDf)
is.null(logDf)
logDf <<- logDf
View(logDf)
df <- sapply(topoFiles, function(topoFile) {
g <- GroupStrength(topoFile, plotOut = plotOut, getTeams = T, logDf = logDf)
print(logDf)
logDf <<- logDf
g
}) %>% t %>%
data.frame %>%
set_names(c("G11", "G22", "G12", "G21", "Gs")) %>%
mutate(Network = topoFiles %>% str_remove(".topo$"))
source("D:/Github/Rpackages/Teams/R/influenceAndGs.R")
df <- sapply(topoFiles, function(topoFile) {
g <- GroupStrength(topoFile, plotOut = plotOut, getTeams = T, logDf = logDf)
print(logDf)
logDf <<- logDf
g
}) %>% t %>%
data.frame %>%
set_names(c("G11", "G22", "G12", "G21", "Gs")) %>%
mutate(Network = topoFiles %>% str_remove(".topo$"))
source("D:/Github/Rpackages/Teams/R/stateLabeller.R")
source("D:/Github/Rpackages/Teams/R/influenceAndGs.R")
setwd(gsCausation)
sapply(netList, function(net) {
setwd(net)
LogFileGen()
GroupStrengthAll(net)
CoherenceSingleNode()
ScoreNStrengthAll()
AllDataFile(net)
AllDataFileNoFlag(net)
setwd("..")
})
source("D:/Github/Rpackages/Teams/R/influenceAndGs.R")
getwd()
netList
net <- netList
GroupStrengthAll(net)
source("D:/Github/Rpackages/Teams/R/influenceAndGs.R")
GroupStrengthAll(net)
source("D:/Github/Rpackages/Teams/R/influenceAndGs.R")
GroupStrengthAll(net)
source("D:/Github/Rpackages/Teams/R/influenceAndGs.R")
GroupStrengthAll(net)
read_csv("LogFile.csv", lazy = F)
source("D:/Github/Rpackages/Teams/R/influenceAndGs.R")
source("D:/Github/Rpackages/Teams/R/stateLabeller.R")
debug(EMTScoreCalc)
source("D:/Github/Rpackages/Teams/R/coherence.R")
source("D:/Github/Rpackages/Teams/R/coherence.R")
setwd(gsCausation)
sapply(netList, function(net) {
setwd(net)
LogFileGen()
GroupStrengthAll(net)
CoherenceSingleNode()
ScoreNStrengthAll()
AllDataFile(net)
AllDataFileNoFlag(net)
setwd("..")
})
states
nodes
states <- states %>% str_remove_all("'") %>%
str_split("") %>% sapply(as.integer) %>% reduce(rbind.data.frame)
View(states)
source("D:/Github/Rpackages/Teams/R/stateLabeller.R")
setwd(gsCausation)
sapply(netList, function(net) {
setwd(net)
LogFileGen()
GroupStrengthAll(net)
CoherenceSingleNode()
ScoreNStrengthAll()
AllDataFile(net)
AllDataFileNoFlag(net)
setwd("..")
})
source("D:/Github/Rpackages/Teams/R/stateLabeller.R")
setwd(gsCausation)
sapply(netList, function(net) {
setwd(net)
LogFileGen()
GroupStrengthAll(net)
CoherenceSingleNode()
ScoreNStrengthAll()
AllDataFile(net)
AllDataFileNoFlag(net)
setwd("..")
})
source("D:/Github/Rpackages/Teams/R/stateLabeller.R")
setwd(gsCausation)
net
getwd()
setwd(net)
ScoreNStrengthAll()
debug(ScoreNStrength)
ScoreNStrengthAll()
View(freqDf)
states <- freqDf$states
nodes <- readLines(str_replace(topoFile, ".topo", "_nodes.txt"))
if (!file.exists(str_replace(topoFile, ".topo", ".team")))
GroupStrength(topoFile, getTeams = T, logDf = logDf)
groupLabels <- readLines(str_replace(topoFile, ".topo", ".teams")) %>% str_split(",")
inflMat <- read.csv(paste0("Influence/", str_replace(topoFile,".topo", "_fullInfl.csv")),
row.names = 1) %>% as.matrix
inflMat <- inflMat[nodes, nodes]
statesDf <- states %>% str_remove_all("'") %>%
str_split("") %>% sapply(as.integer) %>% t %>% data.frame %>%
set_names(nodes)
scores <- apply(statesDf, 1, function(x){
strengthCalc(x, inflMat, groupLabels)
}) %>% t %>% data.frame %>% set_names(c("Strength", "Epithelial", "Mesenchymal"))
source("D:/Github/Rpackages/Teams/R/stateLabeller.R")
ScoreNStrengthAll()
source("D:/Github/Rpackages/Teams/R/stateLabeller.R")
ScoreNStrengthAll()
GroupStrengthAll(net)
source("D:/Github/Rpackages/Teams/R/influenceAndGs.R")
source("D:/Github/Rpackages/Teams/R/setupScript.R")
setwd(gsCausation)
net <- netList
GroupStrengthAll(net)
source("D:/Github/Rpackages/Teams/R/influenceAndGs.R")
GroupStrengthAll(net)
setwd(net)
GroupStrengthAll(net)
source("D:/Github/Rpackages/Teams/R/utils.R")
GroupStrengthAll(net)
ScoreNStrengthAll()
source("D:/Github/Rpackages/Teams/R/stateLabeller.R")
ScoreNStrengthAll()
AllDataFile(net)
source("D:/Github/Rpackages/Teams/R/compileData.R")
AllDataFile(net)
source("D:/Github/Rpackages/Teams/R/compileData.R")
AllDataFile(net)
source("D:/Github/Rpackages/Teams/R/compileData.R")
AllDataFile(net)
metrics <- c("minFrust", "maxFrust", "meanFrust", "meanNetFrust",
"minCoh", "maxCoh", "meanCoh", "meanNetCoh",
"corFreqFrust", "pFreqFrust", "corFreqCoh", "pFreqCoh",
"corFrustCoh", "pFrustCoh", "bmSSF", "bmCoh", "bmFrust")
topoFiles <- list.files(".", ".topo$")
df <- sapply(topoFiles, function(topoFile) {
freqDf <- read_csv(str_replace(topoFile, ".topo", "_finFlagFreq.csv"),
col_types = cols(), lazy = F) %>% filter(flag == 1)
if (nrow(freqDf) < 3)
return(rep(NA, 17))
frust <- freqDf$frust0
freq <- freqDf$Avg0
coh <- freqDf$coherence0
frustration <- c(frust %>% min(na.rm = T), frust %>% max(na.rm = T),
frust %>% mean(na.rm = T), frust*freq %>% sum(na.rm = T))
coherence <- c(coh %>% min(na.rm = T), coh %>% max(na.rm = T),
coh %>% mean(na.rm = T), coh*freq %>% sum(na.rm = T))
cohFreq <- cor.test(coh, freq, method = "spearman")
cohFrust <- cor.test(coh, frust, method = "spearman")
freqFrust <- cor.test(freq, frust, method = "spearman")
cors <- c(freqFrust$estimate, freqFrust$p.value,
cohFreq$estimate, cohFreq$p.value,
cohFrust$estimate, cohFrust$p.value)
bimodalities <- c(bimodality_coefficient(freq),
bimodality_coefficient(frust),
bimodality_coefficient(coh))
c(frustration, coherence, cors, bimodalities)
}) %>% t %>% data.frame %>% set_names(metrics) %>%
mutate(Network = topoFiles %>% str_remove(".topo"))
df <- sapply(topoFiles, function(topoFile) {
freqDf <- read_csv(str_replace(topoFile, ".topo", "_finFlagFreq.csv"),
col_types = cols(), lazy = F) %>% filter(flag == 1)
if (nrow(freqDf) < 3)
return(rep(NA, 17))
frust <- freqDf$frust0
freq <- freqDf$Avg0
coh <- freqDf$coherence0
frustration <- c(frust %>% min(na.rm = T), frust %>% max(na.rm = T),
frust %>% mean(na.rm = T), frust*freq %>% sum(na.rm = T))
coherence <- c(coh %>% min(na.rm = T), coh %>% max(na.rm = T),
coh %>% mean(na.rm = T), coh*freq %>% sum(na.rm = T))
cohFreq <- cor.test(coh, freq, method = "spearman")
cohFrust <- cor.test(coh, frust, method = "spearman")
freqFrust <- cor.test(freq, frust, method = "spearman")
cors <- c(freqFrust$estimate, freqFrust$p.value,
cohFreq$estimate, cohFreq$p.value,
cohFrust$estimate, cohFrust$p.value)
bimodalities <- c(bimodality_coefficient(freq),
bimodality_coefficient(frust),
bimodality_coefficient(coh))
c(frustration, coherence, cors, bimodalities)
}) %>% t %>% data.frame
View(df)
topoFile <- topoFiles[1]
freqDf <- read_csv(str_replace(topoFile, ".topo", "_finFlagFreq.csv"),
col_types = cols(), lazy = F) %>% filter(flag == 1)
if (nrow(freqDf) < 3)
return(rep(NA, 17))
frust <- freqDf$frust0
freq <- freqDf$Avg0
coh <- freqDf$coherence0
frustration <- c(frust %>% min(na.rm = T), frust %>% max(na.rm = T),
frust %>% mean(na.rm = T), frust*freq %>% sum(na.rm = T))
coherence <- c(coh %>% min(na.rm = T), coh %>% max(na.rm = T),
coh %>% mean(na.rm = T), coh*freq %>% sum(na.rm = T))
cohFreq <- cor.test(coh, freq, method = "spearman")
cohFrust <- cor.test(coh, frust, method = "spearman")
freqFrust <- cor.test(freq, frust, method = "spearman")
cors <- c(freqFrust$estimate, freqFrust$p.value,
cohFreq$estimate, cohFreq$p.value,
cohFrust$estimate, cohFrust$p.value)
bimodalities <- c(bimodality_coefficient(freq),
bimodality_coefficient(frust),
bimodality_coefficient(coh))
c(frustration, coherence, cors, bimodalities)
df <- sapply(topoFiles, function(topoFile) {
freqDf <- read_csv(str_replace(topoFile, ".topo", "_finFlagFreq.csv"),
col_types = cols(), lazy = F) %>% filter(flag == 1)
if (nrow(freqDf) < 3)
return(rep(NA, 17))
frust <- freqDf$frust0
freq <- freqDf$Avg0
coh <- freqDf$coherence0
frustration <- c(frust %>% min(na.rm = T), frust %>% max(na.rm = T),
frust %>% mean(na.rm = T), frust*freq %>% sum(na.rm = T))
coherence <- c(coh %>% min(na.rm = T), coh %>% max(na.rm = T),
coh %>% mean(na.rm = T), coh*freq %>% sum(na.rm = T))
cohFreq <- cor.test(coh, freq, method = "spearman")
cohFrust <- cor.test(coh, frust, method = "spearman")
freqFrust <- cor.test(freq, frust, method = "spearman")
cors <- c(freqFrust$estimate, freqFrust$p.value,
cohFreq$estimate, cohFreq$p.value,
cohFrust$estimate, cohFrust$p.value)
bimodalities <- c(bimodality_coefficient(freq),
bimodality_coefficient(frust),
bimodality_coefficient(coh))
c(frustration, coherence, cors, bimodalities)
})
df[[1]]
sapply(df, length)
coh %>% min(na.rm = T)
coh %>% max(na.rm = T)
coh %>% mean(na.rm = T)
coh*freq %>% sum(na.rm = T)
coh*freq
coh
freq
x <- coh*freq
sum(x)
coh*freq %>% sum(na.rm = T)
coherence <- c(coh %>% min(na.rm = T), coh %>% max(na.rm = T),
coh %>% mean(na.rm = T), sum(coh*freq,na.rm = T))
source("D:/Github/Rpackages/Teams/R/compileData.R")
AllDataFile(net)
source("D:/Github/Rpackages/Teams/R/utils.R")
AllDataFile(net)
AllDataFile(net)
metrics <- c("minFrust", "maxFrust", "meanFrust", "meanNetFrust",
"minCoh", "maxCoh", "meanCoh", "meanNetCoh",
"corFreqFrust", "pFreqFrust", "corFreqCoh", "pFreqCoh",
"corFrustCoh", "pFrustCoh", "bmSSF", "bmCoh", "bmFrust")
topoFiles <- list.files(".", ".topo$")
df <- sapply(topoFiles, function(topoFile) {
freqDf <- read_csv(str_replace(topoFile, ".topo", "_finFlagFreq.csv"),
col_types = cols(), lazy = F) %>% filter(flag == 1)
if (nrow(freqDf) < 3)
return(rep(NA, 17))
frust <- freqDf$frust0
freq <- freqDf$Avg0
coh <- freqDf$coherence0
frustration <- c(frust %>% min(na.rm = T), frust %>% max(na.rm = T),
frust %>% mean(na.rm = T), sum(frust*freq,na.rm = T))
coherence <- c(coh %>% min(na.rm = T), coh %>% max(na.rm = T),
coh %>% mean(na.rm = T), sum(coh*freq,na.rm = T))
cohFreq <- cor.test(coh, freq, method = "spearman")
cohFrust <- cor.test(coh, frust, method = "spearman")
freqFrust <- cor.test(freq, frust, method = "spearman")
cors <- c(freqFrust$estimate, freqFrust$p.value,
cohFreq$estimate, cohFreq$p.value,
cohFrust$estimate, cohFrust$p.value)
bimodalities <- c(bimodality_coefficient(freq),
bimodality_coefficient(frust),
bimodality_coefficient(coh))
c(frustration, coherence, cors, bimodalities)
})
getwd()
setwd("..")
source("D:/Github/Rpackages/Teams/R/compileData.R")
AllDataFile(net)
AllDataFileNoFlag(net)
# Multinode Perturbation
setwd(gsCausation)
setwd(net)
topoFiles <- list.files(".", ".topo$")
logDf <- read.csv("LogFile.csv")
sapply(topoFiles, CoherenceAllNode, logDf = logDf)
source("D:/Github/Rpackages/Teams/R/coherence.R")
sapply(topoFiles, CoherenceAllNode, logDf = logDf)
source("D:/Github/Rpackages/Teams/R/coherence.R")
sapply(topoFiles, CoherenceAllNode, logDf = logDf)
source("D:/Github/Rpackages/Teams/R/coherence.R")
sapply(topoFiles, CoherenceAllNode, logDf = logDf)
devtools::load_all()
?require
devtools::install_github("askhari139/Teams")
devtools::install_github("askhari139/Teams")
devtools::install_github("askhari139/Teams")
library(Teams)
### Setup data folder structure
SetupFunc(mainFolder = "D:/TeamsTest", topoFolder = "D:/TopoFiles", numThreads = 3)
Teams::
paths <- readRDS("C:/Users/askha/OneDrive/Documents/R/win-library/4.1/Teams/help/paths.rds")
